---
import httpRequest from "../../helpers/http";
import Layout from "../../layouts/Layout.astro";

const { slug } = Astro.params;
const post = await httpRequest<{ title: string; body: string; id: number }>({
  url: `https://jsonplaceholder.typicode.com/posts/${slug}`,
});

export async function getStaticPaths() {
  const posts = await httpRequest<
    { title: string; body: string; id: number }[]
  >({
    url: "https://jsonplaceholder.typicode.com/posts",
  });
  const paths = posts.map((post) => ({
    params: {
      slug: post.id,
    },
  }));

  return paths;
}
---

<Layout title={post.title || "Welcome to Astro."}>
  <main>
    <h1 class="text">{post.title}</h1>
    <p class="text post-body">{post.body}</p>
  </main>
</Layout>
<style>
  main {
    margin: auto;
    padding: 1.5rem;
    max-width: 60ch;
    background-image: var(--accent-gradient);
  }
  .text {
    color: rgb(var(--accent));
    mix-blend-mode: difference;
  }
  h1 {
    font-size: 3rem;
    font-weight: 800;
    margin: 0;
  }
  .text-gradient {
    background-image: var(--accent-gradient);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-size: 400%;
    background-position: 0%;
  }
  .instructions {
    line-height: 1.6;
    margin: 1rem 0;
    border: 1px solid rgba(var(--accent), 25%);
    background-color: white;
    padding: 1rem;
    border-radius: 0.4rem;
  }
  .instructions code {
    font-size: 0.875em;
    font-weight: bold;
    background: rgba(var(--accent), 12%);
    color: rgb(var(--accent));
    border-radius: 4px;
    padding: 0.3em 0.45em;
  }
  .instructions strong {
    color: rgb(var(--accent));
  }
  .link-card-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr));
    gap: 1rem;
    padding: 0;
  }
</style>
