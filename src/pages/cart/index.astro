---
import Layout from "../../layouts/Layout.astro";
---

<Layout title={"Panier"}>
  <main class="main-container js-main__container">
    <!-- carousel section -->
    <div
      class="jumbotron jumbotron-fluid p-0 m-0 p-20px carousel-image bg-skyblue overflow-hidden d-flex position-relative"
      style={`min-height: 150px;`}
    >
      <div class="container position-relative">
        <div
          class="h-100 d-flex flex-column justify-content-center align-items-center"
        >
          <h1 class="w-auto px-5 py-3">Panier</h1>
        </div>
      </div>
    </div>
    <!-- end of carousel section -->

    <!-- main content -->
    <div class="container">
      <!-- breadcrumb menu -->
      <nav aria-label="breadcrumb p-1 ">
        <ol class="breadcrumb mb-0 bg-white pt-4 pb-4 border-bottom-grey">
          <li class="breadcrumb-item color-grey" aria-current="page">
            <a class="color-grey" href="/">Home</a>
          </li>
          <li class="breadcrumb-item color-grey" aria-current="page">
            <a class="color-grey" href="/cart/">Mon Panier</a>
          </li>
        </ol>
      </nav>
      <!-- end of breadcrumb menu -->

      <!-- product list  -->
      <div class="row pt-lg-5 pb-5 panier__product-list">
        <div class="col-lg-9 pr-lg-2">
          <table class="table table-theme_black">
            <thead>
              <tr class="border-bottom-black">
                <td scope="col" class="color-grey">Produit</td>
                <td scope="col" class="color-grey">Prix</td>
                <td scope="col" class="color-grey">Quantite</td>
                <td scope="col" class="color-grey">Total</td>
                <td scope="col"></td>
              </tr>
            </thead>
            <tbody class="js-cart-details">
              <tr class="border-bottom-black">
                <td
                  class="align-middle pt-lg-5 pt-sm-3 pb-lg-5 pb-sm-3"
                  scope="row"
                  rowspan="5"
                >
                  <span class="panier__product-item">Chargement...</span>
                </td>
              </tr>
            </tbody>
          </table>
        </div>

        <div class="col-lg-3 pl-lg-2">
          <div
            class="card rounded-0 bg-grey pt-4 pb-4 p-4 overflow-hidden mt-5"
          >
            <div class="card-item pt-3 pb-3 align-middle border-bottom-black">
              <div class="p-1 mr-2">Total</div>
              <div
                class="card__highlight bg-white color-green p-1 pl-3 pr-3 rounded-02 bg-grey fs-20 font-weight-bold"
              >
                <span class="js-line-items-total">0</span>
                <sup>DZD</sup>
              </div>
            </div>
            <div
              class="d-flex card-item pt-3 pb-3 align-middle justify-content-between"
            >
              <div class="p-1 mr-2">
                Livraison
                <a href={"/cart/checkout"} class="fs-12">changer</a>
              </div>
              <div
                class="card__highlight p-1 pl-3 pr-3 rounded-02 bg-grey text-right"
              >
                600
                <sup class="fs-12">DZD</sup>
              </div>
            </div>
            <div class="div pt-3 pb-3 d-flex">
              <a
                class="btn bg-green btn-lg btn-block color-white no-border rounded-0 pt-2 pb-2 fs-16"
                href={"/cart/checkout/"}
              >
                Valider votre commande
              </a>
            </div>
          </div>
        </div>
      </div>
    </div>
  </main>
</Layout>
<!-- end of product list  -->

<!-- end main content -->

<script>
  import { LineItemType } from "../../helpers/cart/types";
  import CartStorage from "../../helpers/storage";

  const renderItems = async () => {
    const cart = new CartStorage();
    let renderUI = "";
    let lineItemsTotal = 0;
    const [lineItems = [], products = {}, shippingLines] = await Promise.all([
      cart.getAllItems(),
      cart.getItemsDetails(),
      cart.getShippingLines(),
    ]);
    // @ts-ignore
    lineItems?.map((lineItem, index) => {
      const product = products[lineItem.product_id];
      lineItemsTotal += lineItem?.quantity * product?.regular_price;
      const tr = `
      <tr class="border-bottom-black">
        <td
          class="align-middle pt-lg-5 pt-sm-3 pb-lg-5 pb-sm-3"
          scope="row"
        >
          <img
            src="${product?.thumbnail?.src}"
            alt="${product?.name}"
            width="70px"
          />
          <span class="panier__product-item">${product?.name}</span>
        </td>
        <td class="align-middle pt-lg-5 pt-sm-3 pb-lg-5 pb-sm-3">
          ${product?.regular_price}
          <sup>DZD</sup>
        </td>
        <td class="align-middle pt-lg-5 pt-sm-3 pb-lg-5 pb-sm-3">
          <div
            class="d-flex justify-content-lg-start justify-content-center"
          >
            <div
              class="quantity-container input-group mb-3 mt-2 justify-content-between rounded-0 overflow-hidden"
            >
              <div class="input-group-prepend">
                <button
                  class="input-group-text bg-transparent no-border js-crtl__qty"
                  data-operation="-"
                  data-item="${index}"
                >
                  -
                </button>
              </div>
              <input
                type="text"
                class="form-control no-border text-center bg-white"
                value="${lineItem?.quantity}"
                aria-label="Quantite"
                readonly
              />
              <div class="input-group-append">
                <button
                  class="input-group-text bg-transparent no-border js-crtl__qty"
                  data-operation="+"
                  data-item="${index}"
                >
                  +
                </button>
              </div>
            </div>
          </div>
        </td>
        <td class="align-middle pt-lg-5 pt-sm-3 pb-lg-5 pb-sm-3">
          ${lineItem?.quantity * product?.regular_price}
          <sup>DZD</sup>
        </td>
        <td class="align-middle pt-lg-5 pt-sm-3 pb-lg-5 pb-sm-3">
          <button 
            class="bg-transparent no-border js-cart__remove-item"
            data-item="${index}"
          >
            &times;
          </button>
        </td>
      </tr>
    `;
      renderUI += tr;
    });

    // @ts-ignore
    if (lineItems?.length <= 0) {
      renderUI = `<tr class="border-bottom-black">
      <td
        class="align-middle pt-lg-5 pt-sm-3 pb-lg-5 pb-sm-3"
        scope="row"
        rowspan="5"
      >
          <span class="panier__product-item">Votre panier est vide.</span>
        </td>
    </tr>`;
    }

    const $lineItemsTotal = document.querySelector(".js-line-items-total");
    const $cartBody = document.querySelector(".js-cart-details");
    $lineItemsTotal.textContent = `${lineItemsTotal}`;
    $cartBody.innerHTML = renderUI;
  };
  await renderItems();
  // remove items
  const $removeBtns = document.querySelectorAll(".js-cart__remove-item");
  $removeBtns.forEach(($btn) => {
    $btn.addEventListener("click", async () => {
      // @ts-ignore
      const itemIndex = $btn.dataset?.["item"];
      const cart = new CartStorage();
      const res = await cart.removeItemByIndex(Number(itemIndex));
      await renderItems();
    });
  });
  // set item quantity
  const $btnsQtyCtrl = document.querySelectorAll(".js-crtl__qty");
  $btnsQtyCtrl.forEach(($btn) => {
    $btn.addEventListener("click", async function (e) {
      e.preventDefault();
      // const $target = e.target;
      const _operation = this.dataset.operation;
      const _index = this.dataset.item;
      const $parent = this.parentNode;
      const $qtyInput =
        _operation === "-"
          ? $parent.nextElementSibling
          : $parent.previousElementSibling;

      let _sum = parseInt($qtyInput.value, 10);
      _sum = _operation === "-" ? _sum - 1 : _sum + 1;

      $qtyInput.value = _sum < 1 ? 1 : _sum;
      const cart = new CartStorage();
      await cart.updateItemQuantityByIndex(_index, _sum);
      const items = await cart.getAllItems();
      const products = await cart.getItemsDetails();

      if (Array.isArray(items)) {
        const totalPrice = items?.reduce(
          (acc: number, { product_id, quantity }: LineItemType) => {
            const { regular_price } = products[product_id];
            return acc + regular_price * quantity;
          },
          0
        );
        const $total = document.querySelector(".js-line-items-total");
        $total.textContent = `${totalPrice}`;
      }
    });
  });
</script>
