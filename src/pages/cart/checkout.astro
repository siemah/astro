---
import Layout from "../../layouts/Layout.astro";
import Alert from "../../components/alert/index.astro";
---

<Layout title="Commande">
  <!-- carousel section -->
  <div
    class="jumbotron jumbotron-fluid p-0 m-0 p-20px carousel-image bg-skyblue overflow-hidden d-flex position-relative"
    style={`min-height: 150px;`}
  >
    <div class="container position-relative">
      <div
        class="h-100 d-flex flex-column justify-content-center align-items-center"
      >
        <h1 class="w-auto px-5 py-3">Commande</h1>
      </div>
    </div>
  </div>
  <!-- end of carousel section -->

  <!-- main content -->
  <div class="container">
    <!-- breadcrumb menu -->
    <nav aria-label="breadcrumb p-1 ">
      <ol class="breadcrumb mb-0 bg-white pt-4 pb-4 border-bottom-grey">
        <li class="breadcrumb-item color-grey" aria-current="page">
          <a class="color-grey" href="/">Home</a>
        </li>
        <li class="breadcrumb-item color-grey" aria-current="page">
          <a class="color-grey" href="/cart/">Panier</a>
        </li>
        <li class="breadcrumb-item color-grey" aria-current="page">
          <a class="color-grey" href="#">Commande</a>
        </li>
      </ol>
    </nav>
    <!-- end of breadcrumb menu -->

    <!-- product list  -->
    <Alert variant={"danger"} class="js-alert" />
    <form
      action="#"
      method="POST"
      class="row pt-lg-5 pb-5 panier__product-list needs-validation js-order"
    >
      <div class="col-lg-8 pr-lg-2">
        <div>
          <h1 class="fs-16 mb-3 color-black">Informations de facturation</h1>
          <div class="form-row">
            <div class="form-group col-md-6">
              <label class="color-light-black" for="prenome">Prénom*</label>
              <input
                name="billing[first_name]"
                type="text"
                class="form-control rounded-0"
                id="prenome"
              />
              <div class="invalid-feedback"></div>
            </div>
            <div class="form-group col-md-6">
              <label class="color-light-black" for="nom">Nom de famille*</label>
              <input
                name="billing[last_name]"
                type="text"
                class="form-control rounded-0"
                id="nom"
              />
              <div class="invalid-feedback"></div>
            </div>
          </div>
          <div class="form-row">
            <div class="form-group col-md-6">
              <label class="color-light-black" for="phone"
                >Numéro de téléphone*</label
              >
              <input
                name="billing[phone]"
                type="tel"
                class="form-control rounded-0"
                id="phone"
              />
              <div class="invalid-feedback"></div>
            </div>
            <div class="form-group col-md-6">
              <label class="color-light-black" for="email">Email</label>
              <input
                name="billing[email]"
                type="email"
                class="form-control rounded-0"
                id="email"
              />
              <div class="invalid-feedback"></div>
            </div>
          </div>
          <div class="form-row">
            <div class="form-group col-md-6">
              <label class="color-light-black" for="address">Adresse*</label>
              <input
                name="billing[address_1]"
                type="text"
                class="form-control rounded-0"
                id="address"
              />
              <div class="invalid-feedback"></div>
            </div>
            <div class="form-group col-lg-6">
              <label for="state" class="form-label text-sm"> Wilaya*</label>
              <select
                name="billing[state]"
                id="state"
                class="form-control rounded-0 js-shipping__location"
              >
                <option value="" disabled="" selected>Wilaya</option>
              </select>
              <div class="invalid-feedback"></div>
            </div>
          </div>

          <div class="div pt-3 pb-3">
            <button
              class="btn bg-green color-white no-border rounded-0 pt-2 pb-2"
            >
              Passer la commande
            </button>
          </div>
        </div>
      </div>

      <div class="col-lg-4 pl-lg-2">
        <div class="card bg-grey p-3 rounded-0 overflow-hidden mt-2">
          <div class="card-item pt-3 pb-3 align-middle border-bottom-grey">
            <div class="d-flex justify-content-between">
              <div class="p-1 mr-2">Sous total</div>
              <div class="p-1 pl-3 pr-3 rounded-0">
                <span class="js-line-items-subtotal">0</span>
                <sup>DZD</sup>
              </div>
            </div>
            <div
              class="d-flex card-item pt-3 pb-3 align-middle justify-content-between"
            >
              <div class="p-1 mr-2">
                <div class="mb-3">Livraison</div>
                <div class="d-flex flex-column mb-3">
                  <label
                    for="door"
                    class="d-flex align-items-center form-label text-sm mb-1"
                    ><input
                      type="radio"
                      name="shipping-mode"
                      id="door"
                      class="ml-0 mr-2"
                      value="door"
                      checked=""
                    />
                    <span>À domicile</span>
                  </label>
                  <label
                    for="stop-desk"
                    class="d-flex align-items-center form-label text-sm mb-0"
                  >
                    <input
                      type="radio"
                      name="shipping-mode"
                      id="stop-desk"
                      class="ml-0 mr-2"
                      value="stop-desk"
                    />
                    <span>Stop desk</span>
                  </label>
                </div>
              </div>
              <div
                class="card__highlight p-1 pl-3 pr-3 rounded-02 bg-grey text-right"
              >
                <span class="js-shipping__total">0</span>
                <sup class="fs-12">DZD</sup>
              </div>
            </div>
            <div
              class="card__highlight bg-white color-green p-1 pl-3 pr-3 rounded-0 bg-grey fs-20 font-weight-bold d-flex justify-content-between"
            >
              <div class="p-1 mr-2">Total</div>
              <div>
                <span class="js-line-items-total">0</span>
                <sup>DZD</sup>
              </div>
            </div>
          </div>
        </div>
      </div>
    </form>
  </div>
  <script>
    import {
      customEvent,
      initiateCheckout,
      purchase,
    } from "../../helpers/analytics/facebook-pixel";
    import { constructProductsIds } from "../../helpers/analytics/facebook-pixel/utils";
    import { computeOrderTotal } from "../../helpers/cart";
    import { LineItemType } from "../../helpers/cart/types";
    import { extractStoreKeyFromShippingUrl } from "../../helpers/data";
    import { objectifyFormData } from "../../helpers/form";
    import httpRequest from "../../helpers/http";
    import CartStorage from "../../helpers/storage";
    import { scrollIntoView } from "../../helpers/ui";
    import { fetchAndRenderShippingLocation } from "../../helpers/ui/cart";
    import { validateBillingDetails } from "../../helpers/validators/checkout";

    const $shippingLocation = document.querySelector(".js-shipping__location");
    await fetchAndRenderShippingLocation($shippingLocation);
    // show shipping total
    const cart = new CartStorage();
    const [shippingLine] = await cart.getShippingLines();
    const $shippingTotal = document.querySelector(".js-shipping__total");
    $shippingTotal.textContent = `${shippingLine?.total || 0}`;
    const $total = document.querySelector(".js-line-items-total");
    const total = await computeOrderTotal();
    $total.textContent = `${total}`;
    const $subtotal = document.querySelector(".js-line-items-subtotal");
    $subtotal.textContent = `${total - parseInt(shippingLine?.total || "0")}`;
    // submitting order form
    const $form: HTMLFormElement = document.querySelector(".js-order");
    const productItems = await cart.getAllItems();
    const { content_ids, contents, numItems } = constructProductsIds(
      productItems as LineItemType[]
    );
    const $store_shipping: HTMLMetaElement = document.querySelector(
      "[name=store_shipping]"
    );
    const storeKey = extractStoreKeyFromShippingUrl($store_shipping.content);
    const facebookPixelId =
      // @ts-ignore
      document.querySelector("[name='facebook-pixel-id']")?.content || null;
    // meta initiatechecout event
    if (numItems > 0 && !!facebookPixelId) {
      const fbEventId = `event.id.ic-${Math.random() * 1000000}-${Date.now()}`;
      window.fbq(
        "track",
        "InitiateCheckout",
        {
          contents: JSON.stringify(contents),
          num_items: numItems || 1,
          content_ids: content_ids,
          content_category: "product",
          value: total,
          currency: "DZD",
          timestamp: Date.now(),
        },
        { eventID: fbEventId }
      );
      await initiateCheckout(
        {
          num_items: numItems || 1,
          content_ids: content_ids,
          value: total,
          currency: "DZD",
          contents: contents,
        },
        {
          pixelId: facebookPixelId,
          sourceUrl: window.location.href,
          storeKey,
          eventID: fbEventId,
        }
      );
    }

    $form.addEventListener("submit", async function (event) {
      event.preventDefault();
      !!facebookPixelId &&
        customEvent("StartPurchase", {
          timestamp: Date.now(),
        });
      const { method } = $form;
      const formData = new FormData($form);
      const { billing } = objectifyFormData(formData);
      const errors = validateBillingDetails(billing as Record<string, string>);

      if (errors !== false) {
        const $errorsElements = document.querySelectorAll(".invalid-feedback");
        $errorsElements.forEach(($element) => {
          $element.previousElementSibling.classList.remove("is-invalid");
          $element.previousElementSibling.classList.add("is-valid");
        });
        Object.entries(errors).forEach(([key, errorMessage]) => {
          const $input = document.querySelector(`[name="billing[${key}]"]`);
          $input.classList.remove("is-valid");
          $input.classList.add("is-invalid");
          $input.nextElementSibling.textContent = errorMessage;
        });
        return;
      }

      const cart = new CartStorage();
      const lineItems = await cart.getAllItems();
      const shippingLines = await cart.getShippingLines();
      delete shippingLines?.[0]?.id;
      const order = {
        line_items: lineItems,
        billing,
        shipping_lines: shippingLines,
      };
      const $store_checkout_url: HTMLMetaElement = document.querySelector(
        "[name=store_checkout_url]"
      );
      const action = $store_checkout_url.content;
      const response = await httpRequest({
        url: action,
        requestConfig: {
          method,
          body: JSON.stringify(order),
          headers: {
            "Content-Type": "application/json",
          },
        },
      });
      let fbpOptions;

      if (response?.code === "created") {
        const cart = new CartStorage();
        cart.clearshoppingCart();

        // send standard events 2 meta pixel
        if (!!facebookPixelId) {
          let {
            first_name: fn,
            last_name: ln,
            phone: ph,
            email: em,
            state: st,
          } = billing as Record<string, string>;
          fbpOptions = {
            fn,
            ln,
            ph,
            st,
            country: "dz",
          };
          fbpOptions = !!em ? { ...fbpOptions, em } : fbpOptions;
          const total = await computeOrderTotal();
          await purchase(
            total,
            content_ids,
            contents,
            "DZD",
            "product",
            {
              pixelId: facebookPixelId,
              sourceUrl: window.location.href,
              storeKey,
              eventID: `event.id.p-${response.data.id}`,
            },
            fbpOptions
          );
          customEvent("EndOfPurchase", {
            timestamp: `${Date.now()}`,
          });
        }
        window.location.replace("/orderConfirm");
      } else {
        if (typeof window !== "undefined" && !response.errors?.global) {
          const errorElement: HTMLElement = document.querySelector(".js-alert");
          errorElement.textContent = response.errors?.global;
          scrollIntoView(errorElement, -70);
        }
        !!facebookPixelId &&
          customEvent("ServerErrorInPurchase", {
            contents: response.errors,
          });
      }
    });
  </script>
</Layout>
